""""""""""""""""""""""""""
"" Plugins
""""""""""""""""""""""""""
" Install vim-plug if necessary
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" fixes a bug with jedi
" https://github.com/davidhalter/jedi-vim/issues/889#issuecomment-449547214
:py3 sys.executable='/usr/local/bin/python3' 

call plug#begin('~/.vim/plugged')
Plug 'VundleVim/Vundle.vim'           " let Vundle manage Vundle, required
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'kshenoy/vim-signature'          " marks in gutter plugin
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'EinfachToll/DidYouMean'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
Plug 'w0rp/ale'
Plug 'tpope/vim-commentary'
Plug 'simeji/winresizer'
Plug 'easymotion/vim-easymotion'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'majutsushi/tagbar'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'christoomey/vim-tmux-navigator'
Plug 'melonmanchan/vim-tmux-resizer'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'flazz/vim-colorschemes'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
Plug 'davidhalter/jedi-vim'
Plug 'zchee/deoplete-jedi', { 'do': 'pip3 install jedi' }
Plug 'ervandew/supertab'
Plug 'tpope/vim-dispatch'
Plug 'janko/vim-test'
" Language Support
Plug 'sheerun/vim-polyglot'
Plug 'styled-components/vim-styled-components'
"Plug 'gfontenot/vim-xcode'
call plug#end()


""""""""""""""""""""""""""
"" Settings
""""""""""""""""""""""""""
set nocompatible              " be iMproved
:let mapleader = "-"

set splitbelow
set splitright

set encoding=utf-8
set autoindent

set updatetime=100      " quicker updates for e.g. gitgutter
set mouse=a             " enable mouse navigation

" Indent Settings
set tabstop=2           " number of visual spaces per TAB
set softtabstop=2       " number of spaces in tab when editing
set shiftwidth=2        " number of spaces when reindinting
set expandtab           " tabs are spaces

" Search Settings
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

set t_Co=256            " Use 256 colours always

" Folding settings
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldmethod=indent   " fold based on indent level
" space open/closes folds
nnoremap <space> za

" wildmenu
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pdf,*.psd
set wildignore+=node_modules/*,bower_components/*


""""""""""""""""""""""""""
"" Autocomplete
""""""""""""""""""""""""""
set completeopt=longest,menuone
set belloff+=ctrlg
set shortmess+=c   " Shut off completion messages
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#ternjs#types = 1
let g:deoplete#sources#ternjs#case_insensitive = 1
let g:deoplete#sources#ternjs#docs = 1
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ ]
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
let g:tern#is_show_argument_hints_enabled = 1


""""""""""""""""""""""""""
"" Appearance
""""""""""""""""""""""""""
syntax enable           " enable syntax processing
" let python_highlight_all=1

set laststatus=2        " Always show statusline
set cursorline          " highlight current line
set showcmd             " show partial command
set showmatch           " highlight matching [{()}]
set fillchars+=vert:│   " smoother vertical separator

" Use hybrid line numbers while editing file, and absolute otherwise
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Theme choice, with optimizations for gruvbox
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
let g:gruvbox_italic=1
colorscheme gruvbox

" Airline
let g:airline_theme='deus'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'jsformatter'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#branch#format = 2
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_skip_empty_sections = 1
let g:airline#extensions#branch#displayed_head_limit = 45


""""""""""""""""""""""""""
"" Navigation
""""""""""""""""""""""""""
set hidden              " Allow hiding unsaved buffers
let g:buffergator_autoupdate=1
" reload file if changed when changing buffers
au FocusGained,BufEnter * :checktime

let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlPMRUFiles'
let g:ctrlp_by_filename = 0
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:tmux_resizer_no_mappings = 1
nnoremap <silent> ˙ :TmuxResizeLeft<cr>
nnoremap <silent> ∆ :TmuxResizeDown<cr>
nnoremap <silent> ˚ :TmuxResizeUp<cr>
nnoremap <silent> ¬ :TmuxResizeRight<cr>

" Shortcut to run current file
nnoremap <leader>r :!%:p<Enter>

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>q :bp <BAR> bd #<CR>

" nmap <C-p> :Buffers<CR>
"nmap <Tab> :GFiles<CR>
nnoremap <C-F> yiw:Ag <C-r>"

map <C-n> :call OpenNERDTree()<CR>
"let g:NERDTreeDirArrows=0
let g:NERDTreeWinSize=35
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" NERDTree icon color performance hacks
" let g:NERDTreeSyntaxDisableDefaultExtensions = 1
" let g:NERDTreeDisableExactMatchHighlight = 1
" let g:NERDTreeDisablePatternMatchHighlight = 1
let g:NERDTreeLimitedSyntax = 1
let NERDTreeHijackNetrw=1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['vue'] = '4fc08d'

" if NERDTreeTab is open --> NERDTreeToggle, else NERDTreeFind
function! OpenNERDTree()
    if exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
        NERDTreeToggle
    else
        " finds currently open file in NERDTree
        NERDTreeFind
    endif
endfunction

" Close vim if the only remaining buffer is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Automatically reload vimrc
augroup myvimrchooks
    au!
    autocmd bufwritepost .vimrc source ~/.vimrc
augroup END


""""""""""""""""""""""""""
"" Linting
""""""""""""""""""""""""""

" let g:ale_lint_on_text_changed = 'never'  " Only lint on save
let g:ale_lint_delay = 500
let g:ale_lint_on_enter = 0                 " Speeds up buffer switching a lot
let g:ale_linters = {
      \ 'python': ['flake8'],
      \ 'scss': ['stylelint'],
      \ 'javascript': ['eslint'],
      \ 'vue': ['eslint', 'vls']}
let g:ale_fixers = {
      \ '*': ['trim_whitespace'],
      \ 'python': ['autopep8'],
      \ 'scss': ['stylelint'],
      \ 'javascript': ['eslint'],
      \ 'typescript': ['eslint', 'tslint'],
      \ 'vue': ['eslint', 'trim_whitespace']}
let g:ale_javascript_eslint_options = '--ext .js,.vue'

let g:javascript_plugin_jsdoc = 1

hi Normal ctermbg=NONE guibg=NONE

" Automatically refresh vue syntax highlighting to make sure it works every
" time
autocmd FileType vue syntax sync fromstart


""""""""""""""""""""""""""
"" Git
""""""""""""""""""""""""""
" Refresh git gutter after commiting from fugitive
" autocmd BufWinLeave * GitGutterAll

" My git aliases
:command! Gc !git commit
:command! Gp !git push -u origin HEAD
:command! Gpu !git pull


set timeoutlen=1000 ttimeoutlen=0    " Prevent delay when switching back to normal mode
let g:SignatureMarkTextHLDynamic = 1 " changes mark color according to git-gutter

" autochdir
:autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
:autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)

" Easytags
let g:easytags_async=1
let g:easytags_auto_highlight = 0


""""""""""""""""""""""""""
"" Integrated Testing
""""""""""""""""""""""""""
" make test commands execute using dispatch.vim
let test#strategy = "dispatch"

" Mineralsoft-specific configs
function! DockerTransform(cmd)
  return 'docker-compose exec -T django ' . a:cmd
endfunction
let test#python#runner = 'djangotest'
let g:test#custom_transformations = { 'docker': function('DockerTransform') }
let g:test#transformation = 'docker'
let test#python#djangotest#executable = 'python3 ./manage.py test'

" Keymaps
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
