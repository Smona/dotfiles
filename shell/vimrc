" VUNDLE

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-airline/vim-airline'
Plugin 'othree/html5.vim'
Plugin 'posva/vim-vue'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'liuchengxu/space-vim-dark'
Plugin 'ryanoasis/vim-devicons'
Plugin 'kshenoy/vim-signature'          " marks plugin
Plugin 'gfontenot/vim-xcode'
Plugin 'keith/swift.vim'
Plugin 'digitaltoad/vim-pug'
Plugin 'leafgarland/typescript-vim'
Plugin 'Quramy/tsuquyomi'
Plugin 'vim-syntastic/syntastic'
Plugin 'Valloric/YouCompleteMe'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'EinfachToll/DidYouMean'
Plugin 'davidhalter/jedi-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'cespare/vim-toml'
Plugin 'cakebaker/scss-syntax.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" OTHER SETTINGS

let g:SignatureMarkTextHLDynamic = 1 " changes mark color according to git-gutter
"autocmd BufEnter * silent! lcd %:p:h " automatically cds to whatever buffer i'm in

:let mapleader = "-"
colorscheme space-vim-dark
let g:ale_linters = {
\   'javascript': ['eslint', 'prettier-eslint'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier-eslint'],
\}

let g:ctrlp_map = '<c-o>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_by_filename = 0
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']


""" -------------------- NERDTree CONFIG -------------------------
" nerd tree opens files in different tabs
" let g:NERDTreeMapOpenInTab='<ENTER>'

" start NERDTree automatically on startup
" autocmd vimenter * NERDTree

map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
let g:NERDTreeWinSize=50
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" if NERDTreeTab is open --> NERDTreeToggle, else NERDTreeFind
function! OpenNERDTree()
    if exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
        NERDTreeToggle
    else
        " finds currently open file in NERDTree
        NERDTreeFind
    endif
endfunction

" reload file if changed when changing buffers
au FocusGained,BufEnter * :checktime

set encoding=utf-8
set notermguicolors
set autoindent
let python_highlight_all=1
syntax on   " enable syntax processing
set number  "enable line numbers
set cursorline          " highlight current line
set showcmd     " show partial command
set showmatch           " highlight matching [{()}]
set updatetime=100      " quicker updates for e.g. gitgutter
set mouse=a             " enable mouse navigation

" Indent Settings
set tabstop=2       " number of visual spaces per TAB
set softtabstop=2   " number of spaces in tab when editing
set shiftwidth=2    " number of spaces when reindinting
set expandtab       " tabs are spaces

" Search Settings
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" Easier split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Always show statusline
set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256 colours)
"set t_Co=256

" Folding settings
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldmethod=indent   " fold based on indent level
" space open/closes folds
nnoremap <space> za

" wildmenu
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pdf,*.psd
set wildignore+=node_modules/*,bower_components/*

" Buffers
set hidden

" Shortcut to run current file
nnoremap <leader>r :!%:p<Enter>

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>- :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

nmap <C-p> :Buffers<CR>
nmap <Tab> :GFiles<CR>

" Automatically reload vimrc
augroup myvimrchooks
    au!
    autocmd bufwritepost .vimrc source ~/.vimrc
augroup END

""""" Airline
let g:airline_theme='violet'
" let g:airline_solarized_bg='dark'
" let g:airline#extensions#syntastic#enabled = 1
let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ycm#enabled = 1

""""" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.

hi Normal ctermbg=NONE guibg=NONE

" Automatically refresh vue syntax highlighting to make sure it works every
" time
autocmd FileType vue syntax sync fromstart

" Refresh git gutter after commiting from fugitive
autocmd BufWinLeave * GitGutterAll

